#-----------------------------------------------------------------
# PIPELINE CI/CD POUR LA PLATEFORME E-COMMERCE
# Auteur: Tyler & Dina
# Derni√®re mise √† jour: Mars 2025
# TODO : 
# - Factorisation du code via l'approche matrice pour am√©liorer la maintenabilit√©
# - Cr√©ation d'images sp√©cifiques pour les outils de CI (Checkov, Trivy) pour acc√©l√©rer les builds
# - Modularisation du pipeline via includes pour une meilleure organisation du code
# - Optimisation des caches Docker pour r√©duire le temps de build
# - Consolidation des tests de s√©curit√© dans une seule √©tape
#-----------------------------------------------------------------

#-----------------------------------------------------------------
# HOOKS - TEMPLATES R√âUTILISABLES
# Ces templates d√©finissent des comportements communs pour 
# diff√©rents types de jobs, favorisant la r√©utilisation du code
# et assurant une coh√©rence dans le pipeline.
#-----------------------------------------------------------------

# Template pour les v√©rifications de s√©curit√© avec Checkov
# V√©rifie les vuln√©rabilit√©s dans les Dockerfiles selon les standards CIS
.security_check: &security_template
  stage: security
  image: python:3.9-slim
  tags:
  - shell
  before_script:
    - apt-get update
    - apt-get install -y curl build-essential
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source $HOME/.cargo/env
  script:
    - pip install --upgrade pip
    - pip install checkov
    - |
      checkov \
        -f ${DOCKERFILE_PATH} \
        --framework dockerfile \
        --check CKV_DOCKER_2,CKV_DOCKER_3,CKV_DOCKER_4 \
        --output json \
        --output-file-path ${IMAGE_NAME}-security.json \
        --soft-fail
  artifacts:
    paths:
      - ${IMAGE_NAME}-security.json
    expire_in: 1 week
  allow_failure: true

# Template pour la construction et la publication des images Docker
# Automatise le processus de build et de push vers le registre GitLab
.build_and_push_image: &build_template
  stage: build
  tags:
    - shell
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - |
      echo "üèóÔ∏è Building ${IMAGE_NAME}:latest"
      docker build -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest \
        -f ${DOCKERFILE_PATH} ${BUILD_CONTEXT}
      docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest
  after_script:
    - docker logout $CI_REGISTRY

# Template pour le linting des projets Node.js
# V√©rifie la qualit√© du code selon les standards d√©finis
.lint_node_template: &lint_node_template
 stage: lint
 image: node:16-alpine
 before_script:
   - cd ${SERVICE_PATH}
   - |
     echo '{
       "scripts": {"lint": "eslint src"},
       "devDependencies": {
         "eslint": "^8.45.0",
         "@babel/core": "^7.22.5",
         "@babel/eslint-parser": "^7.22.5"
       },
       "eslintConfig": {
         "parser": "@babel/eslint-parser",
         "parserOptions": {
           "requireConfigFile": false,
           "ecmaVersion": "latest",
           "sourceType": "module"
         }
       }
     }' > package.json
   - npm install
 script:
   - npm run lint
 allow_failure: true

# Template pour l'analyse des vuln√©rabilit√©s avec Trivy
# D√©tecte les vuln√©rabilit√©s HIGH et CRITICAL dans les images
.trivy_template: &trivy_template
 stage: trivy
 image:
   name: aquasec/trivy:latest
   entrypoint: [""]
 script:
   - trivy fs --severity HIGH,CRITICAL ${DOCKERFILE_PATH}
 allow_failure: true

#-----------------------------------------------------------------
# STAGES
# D√©finition des √©tapes du pipeline CI/CD par ordre d'ex√©cution
# Chaque job est assign√© √† un stage sp√©cifique qui s'ex√©cute s√©quentiellement selon l'ordre d√©fini ici.
#-----------------------------------------------------------------
stages:
  - lint       # V√©rification de la qualit√© du code
  - security   # V√©rifications de s√©curit√© des Dockerfiles
  - build      # Construction et publication des images Docker
  - trivy      # Analyse des vuln√©rabilit√©s avec Trivy
  - prepare-vm # Pr√©paration de l'environnement Kubernetes local
  - prepare-aws # Pr√©paration de l'environnement AWS EKS
  - deploy     # D√©ploiement dans les environnements cibles

#-------------------------------------------------------------------
# LINTING
# Jobs pour la v√©rification de la qualit√© du code des diff√©rents
# services. Ces jobs s'ex√©cutent uniquement et provisoirement sur la branche "lint".
#-------------------------------------------------------------------

# Linting pour le service frontend React
lint_app:
  stage: lint
  image: node:16
  variables:
    SERVICE_PATH: "./builds/app"
  script:
    - cd ${SERVICE_PATH}
    - npm install
    - npm install --save-dev eslint-config-react-app @babel/eslint-parser babel-preset-react-app
    - npm run lint
  rules:
    - if: '$CI_COMMIT_BRANCH == "lint"'
      when: always
  allow_failure: true

# Linting pour le microservice de gestion des clients
lint_customers:
 stage: lint
 image: node:18-alpine
 variables:
   SERVICE_PATH: "./builds/customers"
 script:
   - ls -la ${SERVICE_PATH}
   - cat ${SERVICE_PATH}/package.json
 allow_failure: true
 rules:
   - if: '$CI_COMMIT_BRANCH == "lint"'
     when: always

# Linting pour le microservice de gestion des produits
lint_products:
 stage: lint
 image: node:16-alpine
 variables:
   SERVICE_PATH: "./builds/products"
 script:
   - ls -la ${SERVICE_PATH}
   - cat ${SERVICE_PATH}/package.json
 allow_failure: true
 rules:
   - if: '$CI_COMMIT_BRANCH == "lint"'
     when: always

# Linting pour le microservice de gestion du panier
lint_shopping:
 stage: lint
 image: node:16-alpine
 variables:
   SERVICE_PATH: "./builds/shopping"
 script:
   - ls -la ${SERVICE_PATH}
   - cat ${SERVICE_PATH}/package.json
 allow_failure: true
 rules:
   - if: '$CI_COMMIT_BRANCH == "lint"'
     when: always

#-------------------------------------------------------------------
# CHECKOV
# Analyse de s√©curit√© des Dockerfiles avec l'outil Checkov.
# S'ex√©cute au premier push OU lors de modifications des services.
#-------------------------------------------------------------------

# V√©rification de s√©curit√© pour le frontend
check_app:
  <<: *security_template
  variables:
    IMAGE_NAME: "app"
    DOCKERFILE_PATH: "./builds/app/Dockerfile"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE == "0000000000000000000000000000000000000000"
      when: always
    - changes:
        - builds/app/**/*
      when: always

# V√©rification de s√©curit√© pour le service clients
check_customers:
  <<: *security_template
  variables:
    IMAGE_NAME: "customers"
    DOCKERFILE_PATH: "./builds/customers/Dockerfile"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE == "0000000000000000000000000000000000000000"
      when: always
    - changes:
        - builds/customers/**/*
      when: always

# V√©rification de s√©curit√© pour le service produits
check_products:
  <<: *security_template
  variables:
    IMAGE_NAME: "products"
    DOCKERFILE_PATH: "./builds/products/Dockerfile"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE == "0000000000000000000000000000000000000000"
      when: always
    - changes:
        - builds/products/**/*
      when: always

# V√©rification de s√©curit√© pour le service panier
check_shopping:
  <<: *security_template
  variables:
    IMAGE_NAME: "shopping"
    DOCKERFILE_PATH: "./builds/shopping/Dockerfile"
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BEFORE == "0000000000000000000000000000000000000000"
      when: always
    - changes:
        - builds/shopping/**/*
      when: always

#-------------------------------------------------------------------
# TRIVY
# Analyse approfondie des vuln√©rabilit√©s dans les images Docker.
# D√©tecte les failles de s√©curit√© de niveau HIGH et CRITICAL.
#-------------------------------------------------------------------

# Scan Trivy pour le frontend
trivy_app:
  <<: *trivy_template
  variables:
    DOCKERFILE_PATH: "./builds/app"

# Scan Trivy pour le service clients
trivy_customers:
  <<: *trivy_template
  variables:
    DOCKERFILE_PATH: "./builds/customers"

# Scan Trivy pour le service produits
trivy_products:
  <<: *trivy_template
  variables:
    DOCKERFILE_PATH: "./builds/products"

# Scan Trivy pour le service panier
trivy_shopping:
  <<: *trivy_template
  variables:
    DOCKERFILE_PATH: "./builds/shopping"

#-------------------------------------------------------------------
# BUILD
# Construction et publication des images Docker pour chaque service.
# Ces jobs s'ex√©cutent uniquement apr√®s les v√©rifications de s√©curit√©
# et seulement si des modifications ont √©t√© apport√©es au service concern√©.
#-------------------------------------------------------------------

# Version factoris√©e avec parallel:matrix qui respecte les r√®gles conditionnelles
# Cette approche permet de r√©duire la duplication de code tout en conservant
# la logique de construction conditionnelle bas√©e sur les changements Git
build_service:
  stage: build
  parallel:
    matrix:
      - SERVICE_CONFIG:
          - {name: "app", dependency: "check_app"}
          - {name: "customers", dependency: "check_customers"}
          - {name: "products", dependency: "check_products"}
          - {name: "shopping", dependency: "check_shopping"}
  tags:
    - shell
  needs:
    - job: $SERVICE_CONFIG.dependency
      optional: true
  variables:
    IMAGE_NAME: $SERVICE_CONFIG.name
    DOCKERFILE_PATH: "./builds/$SERVICE_CONFIG.name/Dockerfile"
    BUILD_CONTEXT: "./builds/$SERVICE_CONFIG.name"
  before_script:
    # V√©rification si le job doit s'ex√©cuter en fonction des changements Git
    - |
      RUN_JOB=false
      if [ "$CI_PIPELINE_SOURCE" = "push" ] && [ "$CI_COMMIT_BEFORE" = "0000000000000000000000000000000000000000" ]; then
        echo "Premier push d√©tect√© pour $IMAGE_NAME, construction n√©cessaire."
        RUN_JOB=true
      else
        CHANGED_FILES=$(git diff --name-only $CI_COMMIT_BEFORE $CI_COMMIT_SHA | grep "builds/${IMAGE_NAME}/")
        if [ -n "$CHANGED_FILES" ]; then
          echo "Modifications d√©tect√©es dans builds/${IMAGE_NAME}/, construction n√©cessaire."
          RUN_JOB=true
        else
          echo "Aucune modification d√©tect√©e pour $IMAGE_NAME, construction ignor√©e."
          exit 0
        fi
      fi
    # Connexion au registre de conteneurs GitLab
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - echo "Construction de l'image ${IMAGE_NAME}:latest"
    - docker build -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest -f ${DOCKERFILE_PATH} ${BUILD_CONTEXT}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest
  after_script:
    - docker logout $CI_REGISTRY

#-------------------------------------------------------------------
# PREPARE ENVIRONMENTS
# Configuration des environnements Kubernetes pour le d√©ploiement.
# Ces jobs sont manuels et pr√©parent les clusters avant d√©ploiement.
#-------------------------------------------------------------------

# Pr√©paration de l'environnement Kubernetes local (k3s)
# Configure cert-manager et sealed-secrets pour la gestion s√©curis√©e
prepare_environment_vm:
  stage: prepare-vm
  image: alpine/helm:3.11.1
  tags:
    - shell
  variables:
    CERT_MANAGER_EMAIL: "example@example.com"
  before_script:
    - export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
    - echo "KUBECONFIG is set to:$KUBECONFIG"
  script:
    - helm upgrade cert-manager jetstack/cert-manager --namespace cert-manager --values ./example-helm/charts/values-cert-manager.yaml --reuse-values
    - kubectl wait --for=condition=Available deployment/cert-manager -n cert-manager --timeout=120s
    - chmod +x scripts/*
    - ./scripts/sealed-secret.sh
    - ./scripts/sealed-secret-backup.sh
    - ./scripts/cluster-issuer.sh
  artifacts:
    paths:
      - backups/
    expire_in: 1 week
  rules:
    - when: manual
      allow_failure: true

# Pr√©paration de l'environnement AWS EKS pour la production
# Configure les outils n√©cessaires dans le cluster de production AWS
prepare_environment_aws:
  stage: prepare-aws
  image: ${CI_REGISTRY_IMAGE}/app-deploy-prod:latest
  tags: [prod]
  variables:
    CERT_MANAGER_EMAIL: example@example.com
    AWS_DEFAULT_REGION: example-region
    CLUSTER_NAME: example-eks-cluster
    NAMESPACE: production
    KUBECONFIG: ~/.kube/config
    GITLAB_REGISTRY_USER: "gitlab-ci-token"
    GITLAB_REGISTRY_TOKEN: $CI_PUSH_TOKEN
  before_script:
    - |
      # Installation de kubectl
      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      chmod +x kubectl
      mv kubectl /usr/local/bin/
      export KUBECONFIG=~/.kube/config
      mkdir -p ~/.kube
      touch $KUBECONFIG
      chmod 600 $KUBECONFIG
      aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_DEFAULT_REGION}
      kubectl cluster-info
  script:
    - |
      if ! kubectl get namespace production >/dev/null 2>&1; then
        echo "üì¶ Cr√©ation du namespace production..."
        kubectl create namespace production
      fi
    # Installation et configuration
    - chmod +x scripts/*
    - ./scripts/sealed-secret-install-prod.sh
    - sleep 50
    - ./scripts/sealed-secret-prod.sh
    - ./scripts/sealed-secret-backup-prod.sh
    - ./scripts/cluster-issuer.sh
  rules:
    - when: manual
      allow_failure: true

#-------------------------------------------------------------------
# D√âPLOIEMENTS
# Jobs pour d√©ployer l'application dans diff√©rents environnements.
# Chaque job utilise Helm pour g√©rer les d√©ploiements Kubernetes.
#-------------------------------------------------------------------

# D√©ploiement dans l'environnement de d√©veloppement (k3s local)
# S'ex√©cute manuellement sur la branche "develop"
deploy-dev:
  stage: deploy
  image: alpine/helm:3.11.1
  tags:
    - shell
  environment:
    name: dev
    kubernetes:
      namespace: dev
  variables:
    HELM_DEBUG: "true"
  before_script:
    - export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
  script:
    - >-
      helm upgrade app-name ./example-helm/charts
      --install
      --namespace dev
      --create-namespace
      --values ./example-helm/charts/values-dev.yaml
      --set app.image.repository=${CI_REGISTRY_IMAGE}/app
      --set customers.image.repository=${CI_REGISTRY_IMAGE}/customers
      --set products.image.repository=${CI_REGISTRY_IMAGE}/products
      --set shopping.image.repository=${CI_REGISTRY_IMAGE}/shopping
      --atomic
      --timeout 10m
    - kubectl get pods -n dev
  after_script:
    - chmod +x scripts/init-data.sh
    - ./scripts/init-data.sh
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      when: manual

# D√©ploiement dans l'environnement de staging (k3s ou EKS)
# S'ex√©cute manuellement sur la branche "staging"
deploy-staging:
  stage: deploy
  image: alpine/helm:3.11.1
  tags:
    - shell
  environment:
    name: staging
    kubernetes:
      namespace: staging
  variables:
    HELM_DEBUG: "true"
  before_script:
    - export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
  script:
    - >-
      helm upgrade app-name ./example-helm/charts
      --install
      --namespace staging
      --create-namespace
      --values ./example-helm/charts/values-staging.yaml
      --set app.image.repository=${CI_REGISTRY_IMAGE}/app
      --set customers.image.repository=${CI_REGISTRY_IMAGE}/customers
      --set products.image.repository=${CI_REGISTRY_IMAGE}/products
      --set shopping.image.repository=${CI_REGISTRY_IMAGE}/shopping
      --atomic
      --timeout 10m
    - kubectl get pods -n staging
  after_script:
    - chmod +x scripts/init-data-staging.sh
    - ./scripts/init-data-staging.sh
  rules:
    - if: '$CI_COMMIT_BRANCH == "staging"'
      when: manual

# D√©ploiement dans l'environnement de production (AWS EKS)
# S'ex√©cute manuellement sur la branche "main"
# Inclut la r√©cup√©ration des IDs des volumes EBS depuis Terraform
deploy-prod:
  stage: deploy
  tags:
    - prod
  image: registry.example.com/organization/project/app-deploy-prod
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
    HELM_DEBUG: "true"
    PROD_NAMESPACE: "production"
    TF_STATE_BUCKET: "example-tfstate-bucket"
    CI_REGISTRY_IMAGE: "registry.example.com/organization/project"
  before_script:
    - |
      # Installation des outils n√©cessaires
      apt-get update && apt-get install -y wget
      wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
      chmod +x /usr/local/bin/yq
      git config --global user.email "example@example.com"
      git config --global user.name "CI User"

      # R√©cup√©ration et debug des volumes EBS
      aws s3 cp s3://${TF_STATE_BUCKET}/env:production/infrastructure/outputs.json /tmp/

      # Volumes EBS
      export MONGODB_CUSTOMERS_PRIMARY_ID=$(cat /tmp/outputs.json | jq -r '.ebs_volumes.value.mongodb_customers.primary.id')
      export MONGODB_PRODUCTS_PRIMARY_ID=$(cat /tmp/outputs.json | jq -r '.ebs_volumes.value.mongodb_products.primary.id')
      export MONGODB_SHOPPING_PRIMARY_ID=$(cat /tmp/outputs.json | jq -r '.ebs_volumes.value.mongodb_shopping.primary.id')
      export RABBITMQ_PRIMARY_ID=$(cat /tmp/outputs.json | jq -r '.ebs_volumes.value.rabbitmq.primary.id')
      # Bucket de backup
      export BACKUP_BUCKET=$(cat /tmp/outputs.json | jq -r '.backup_bucket.value')
  script:
    # Clone et navigation
    - |
      echo "Clonage du repo manifest..."
      MANIFEST_REPO="https://oauth2:${CI_PUSH_TOKEN}@gitlab.com/organization/project-manifest.git"
      git clone ${MANIFEST_REPO} /tmp/example-manifest
      cd /tmp/example-manifest
    - |
      echo "Copie du dossier charts..."
      cp -r $CI_PROJECT_DIR/example-helm/charts/* .
    - |
      echo "Mise √† jour des valeurs EBS..."
      # Ajout d'un timestamp pour forcer le changement
      TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
      echo "# Last updated: ${TIMESTAMP}" >> values-prod.yaml

      # Mise √† jour des values avec yq
      yq eval ".mongoCusto.storage.volumes.primary.volumeId = \"${MONGODB_CUSTOMERS_PRIMARY_ID}\"" -i values-prod.yaml
      yq eval ".mongoProd.storage.volumes.primary.volumeId = \"${MONGODB_PRODUCTS_PRIMARY_ID}\"" -i values-prod.yaml
      yq eval ".mongoShop.storage.volumes.primary.volumeId = \"${MONGODB_SHOPPING_PRIMARY_ID}\"" -i values-prod.yaml
      yq eval ".rabbitmq.storage.volumes.primary.volumeId = \"${RABBITMQ_PRIMARY_ID}\"" -i values-prod.yaml
      yq eval ".mongoCusto.backup.destination.s3.bucket = \"${BACKUP_BUCKET}\"" -i values-prod.yaml
      yq eval ".mongoProd.backup.destination.s3.bucket = \"${BACKUP_BUCKET}\"" -i values-prod.yaml
      yq eval ".mongoShop.backup.destination.s3.bucket = \"${BACKUP_BUCKET}\"" -i values-prod.yaml

    # Git operations
    - |
      echo "Push des changements..."
      git add .
      git commit -m "Update EBS values: ${TIMESTAMP}" || true
      git push -f ${MANIFEST_REPO} HEAD:main
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
      allow_failure: false
